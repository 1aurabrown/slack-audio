#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var log = require('verbalize');
var colors = require('colors');
var nowplaying = require('nowplaying');
var request = require('request');

var argv = require('minimist')(process.argv.slice(2), {
    'string': ['user'],
    'default': {
        'user': 'Unknown Maxrelaxer'
    }
});

var slack = {
    'username': 'Jams Bot',
    'icon_emoji': ':musical_note:',
    'webhookUrl': 'https://maxrelax.slack.com/services/hooks/incoming-webhook?token=THTv0gnuZCooGY16FS2SBxc0'
};

var user = argv.user;

// Verbalize `runner`
log.runner = 'nowplaying-slack';

var currentTrack = null;
var message, payload;

nowplaying.on("playing", function(data) {
    console.log("PLAYING!".green);
    message = getFormattedMessage(data);
    console.log("[message to post]".green);
    console.log(message.yellow);

    var slackPayload = {
        'username': slack['username'],
        'icon_emoji': slack['icon_emoji'],
        'channel': '#relaxbot',
        'text': message
    };

    if (message && message != currentTrack) {
        request.post({
            url: slack.webhookUrl,
            json: true,
            body: JSON.stringify(slackPayload)

        }, function(err, resp, body) {
            if (err) console.error(err);
            if (resp && body) {
                console.log('Slack says OK!'.green);
                currentTrack = message;
            }
        })
    }
});

nowplaying.on("paused", function(data) {
    console.log("PAUSED!".yellow, data);
});

function getFormattedMessage(data) {
    if (data.source == 'Spotify') return spotifyMessage(data);
    if (data.source == 'iTunes') return iTunesMessage(data);
    return null;
}

function iTunesMessage(data) {
    var msg = user + ' is now playing via iTunes:\n',
        artist = data['albumArtist'] || data['artist'],
        year = data['year'],
        name = data['name'],
        album = data['album'],
        trackNumber = data['trackNumber'],
        trackCount = data['trackCount'],
        playCount = data['playCount'];

    if (artist && name) {
        msg += '> *' + artist + ' - ' + name + '*';
    } else {
        return null;
    }

    if (album) {
        msg += '\n';
        msg += '> ' + album;
        if (year) msg += ' (' + year + ')'
    }

    if (trackNumber && trackCount && trackCount > 0) {
        msg += '\n';
        msg += '> Track ' + trackNumber + ' of ' + trackCount;
        if (playCount && playCount > 1) {
            msg += ' (played ' + playCount + ' times)'
        }
    }
    return msg;
}

function spotifyMessage(data) {
    var msg = user + ' is now playing via Spotify:\n',
        trackId = data['trackId'] || null,
        artist = data['albumArtist'] || data['artist'],
        year = data['year'],
        name = data['name'],
        album = data['album'],
        trackNumber = data['trackNumber'],
        playCount = data['playCount'];

    if (artist && name) {
        if (trackId) {
            var spotifyURI = trackId.replace(/spotify:/g, '');
            var link = 'http://open.spotify.com/' + spotifyURI.replace(/:/g, '/');
            msg += '> *<' + link + '|' + artist + ' - ' + name + '>*';
        } else {
            msg += '> *' + artist + ' - ' + name + '*';
        }
    } else {
        return null;
    }

    if (album) {
        msg += '\n> ' + album;
        if (year) msg += ' (' + year + ')'
    }

    if (trackNumber) {
        msg += '\n> Track ' + trackNumber;
        if (playCount && playCount > 1) {
            msg += ' (played ' + playCount + ' times)';
        }
    }

    return msg;
}